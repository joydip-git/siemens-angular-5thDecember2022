binding:
One-way
	1. passing data from code to view => data binding
		 a. interpolation
				code: data = 10
				view: {{data}}
		b. property binding
				code: data = 10
				view: <element [value]="data">
	2. passing data from view to code => event binding
				view: <element (event-name)="method_in_code(data)">
				code: method_in_code(data:any){}

Two-way:
	[(ngModel)]="prop-name"
	[value]="prop-name"
	(changes)=>prop-name


Template reference variable:
<element #ele>

Directive: to be used as custom attribute of an element, extending the behavior of that element
	<element ngModel/>

@Directive({
		name:['ngModel']
})
class X{}

	a. attribute directive: ngModel, ngClass, ngStyle, etc...
	b. structural directive: ngFor, ngIf, ngIfElse, etc...
	c. component directive: component (view+code)=> used as custom HTML tag

Forms in Angular:
	a. template driven form: tenmplates control everything (update controls with values from code, update code by passing control values) about a form by using certain directives like ngModel (creates a FormControl) and ngForm (creates a FormGroup). You don't have direct access top those underlying objects. this is not easy to test.
	b. Reactive Forms: everything about a form is controlled from code by directly accessing FormGroup, FormControl etc. this is easy to test. 


DI:
	Angular creates instances of service
	Angular needs a provider for that service
	Angular uses an Injector to inject the reference of the created object of the service class
	Angular maintains the object lifecycle
	
	who needs the DI?
	a. an asset only 
			register at the asset level
			an object will created to be used by that asset and that asset only
	
	b. assets of a module
			register at the that module level
			an object will created to be used by all the assets of that module and that module ONLY

	c. assets from different modules in the entire application
			register at the that root module level
			an object will created to be used by all the assets of that application

	Angular provides different injectors at every level
	

src>app>
		products>
				components
					add-product>[add-product.component.ts/.html/.css/.spec.ts]
					view-product>[view-product.component.ts/.html/.css/.spec.ts]
					product-list>[product-list.component.ts/html/css/.spec.ts]

				services
					products.service.ts

				pipes
					product-filter.pipe.ts

				products.module.ts

ng cli tool:
component:
>ng g c products/components/add-product --skip-tests
>ng generate component products/components/product-list --skip-tests

module:
>ng generate module products 

service
>ng g s products/services/product --skip-tests


URL List:
---------------------------------------------------------------------------
GET http://localhost:3000/products		NA			array of product objects
GET http://localhost:3000/products/id	id			a product object

ngIf, ngIfElse, ngClass, ngStyle
package name: @angular/common
module name: CommonModule

ngModel, ngForm, FormControl, FormGroup, FormBuilder
package name: @angular/forms
module name: FormsModule

formControl, formControlName, formGroup, formGroupName etc.
package name: @angular/forms
module name: ReactiveFormsModule

HttpClient: 
		- a built-in service class (@angular/common/http) which provides several methods so that you can perform HTTP requests
		- in your service class request for dependency injection
		- import HttpClientModule and register the same in "imports" array in your module, which provides provider for HttpClient service class

package name: @angular/common/http
module name: HttpClientModule

@Injectable(): mark any asset with this decorator, which requires DI

Note: If a component, directive, module, pipe demands for DI, you don't need to mark them with @Injetable(), since those decorators (@Component, @Directive, @Pipe, @NgModule all) implemenmt/inherit from @Injectable
On;ly in case of service, you need @Injectable() since generally services classes are not marked with any other decorator

Reactive Extensions: APIs for asynchronous programming, based on observer pattern

Note:
on a single element do not use mor ethan one structural directive, because Angular do not have the capacity to understand the order of usage of those directive







